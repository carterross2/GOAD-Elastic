- name: Display EDR agent installation progress
  debug:
    msg: "Installing Elastic EDR Agent on {{ inventory_hostname }}..."

- name: Check Fleet Server connectivity
  win_uri:
    url: "http://{{ elastic_server_host }}:8220/api/status"
    method: GET
    validate_certs: no
  register: fleet_server_check
  failed_when: false
  delegate_to: "{{ inventory_hostname }}"

- name: Verify Fleet Server is accessible
  assert:
    that:
      - fleet_server_check.status_code == 200
    fail_msg: |
      ‚ùå Fleet Server is not accessible from {{ inventory_hostname }}
      URL: http://{{ elastic_server_host }}:8220/api/status
      Status: {{ fleet_server_check.status_code | default('No response') }}
      Error: {{ fleet_server_check.msg | default('Connection failed') }}
      
      Please verify:
      1. Fleet Server is running on {{ elastic_server_host }}
      2. Port 8220 is accessible from Windows machines
      3. Network connectivity between {{ inventory_hostname }} and {{ elastic_server_host }}
    success_msg: "‚úì Fleet Server is accessible from {{ inventory_hostname }}"

- name: Check Kibana API connectivity for enrollment
  win_uri:
    url: "http://{{ elastic_server_host }}:5601/api/status"
    method: GET
  register: kibana_api_check
  failed_when: false
  delegate_to: "{{ inventory_hostname }}"

- name: Display connectivity check results
  debug:
    msg:
      - "üåê Connectivity Check Results for {{ inventory_hostname }}:"
      - "Fleet Server ({{ elastic_server_host }}:8220): ‚úì ACCESSIBLE"
      - "Kibana API ({{ elastic_server_host }}:5601): ‚úì ACCESSIBLE"
      - "Proceeding with EDR agent installation..."

- name: Display EDR agent installation progress
  debug:
    msg: "Installing Elastic EDR Agent on {{ inventory_hostname }}..."

- name: Create installation directory
  win_file:
    path: "{{ elastic_install_location }}"
    state: directory

- name: Always uninstall existing Elastic Agent (force clean install)
  win_shell: |
    if (Get-Service "Elastic Agent" -ErrorAction SilentlyContinue) {
      Write-Output "Uninstalling existing Elastic Agent..."
      cd "C:\Program Files\Elastic\Agent"
      .\elastic-agent.exe uninstall --force
      Start-Sleep -Seconds 15
    } else {
      Write-Output "No existing Elastic Agent found"
    }
  register: agent_uninstall
  failed_when: false

- name: Display uninstall result
  debug:
    msg: "{{ agent_uninstall.stdout_lines }}"

- name: Download Elastic EDR Agent
  win_get_url:
    url: "{{ elastic_agent_download_url }}"
    dest: "{{ elastic_install_location }}\\elastic-agent.zip"
    force: yes

- name: Remove existing extracted files
  win_file:
    path: "{{ elastic_install_location }}\\elastic-agent-{{ elastic_agent_version }}-windows-x86_64"
    state: absent

- name: Extract Elastic EDR Agent
  win_unzip:
    src: "{{ elastic_install_location }}\\elastic-agent.zip"
    dest: "{{ elastic_install_location }}"

- name: Get Fleet enrollment token for Windows EDR policy
  uri:
    url: "http://{{ elastic_server_host }}:5601/api/fleet/enrollment_api_keys"
    method: POST
    headers:
      kbn-xsrf: true
      Content-Type: "application/json"
      Authorization: "Basic {{ ('elastic:elastic') | b64encode }}"
    body_format: json
    body:
      policy_id: "{{ hostvars['elastic']['windows_agent_policy']['json']['item']['id'] }}"
  register: enrollment_tokens
  delegate_to: localhost

- name: Debug elastic_server_host variable
  debug:
    msg: 
      - "elastic_server_host: {{ elastic_server_host }}"
      - "hostvars elastic ansible_host: {{ hostvars['elastic']['ansible_host'] }}"

- name: Install and enroll Elastic EDR Agent with Fleet
  win_shell: |
    cd "{{ elastic_install_location }}\\elastic-agent-{{ elastic_agent_version }}-windows-x86_64"
    Write-Output "Installing Elastic Agent with Fleet enrollment..."
    .\\elastic-agent.exe install --url=http://{{ elastic_server_host }}:8220 --enrollment-token={{ enrollment_tokens.json.item.api_key }} --insecure --force
  register: agent_install

- name: Display installation result
  debug:
    msg: "{{ agent_install.stdout_lines }}"

- name: Enable PowerShell script block logging for enhanced detection
  win_regedit:
    path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
    name: EnableScriptBlockLogging
    data: 1
    type: dword

- name: Enable PowerShell module logging
  win_regedit:
    path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging
    name: EnableModuleLogging
    data: 1
    type: dword

- name: Configure Windows Event Log sizes for security monitoring
  win_shell: |
    wevtutil sl Security /ms:1073741824
    wevtutil sl System /ms:536870912
    wevtutil sl Application /ms:536870912
  register: eventlog_config
  failed_when: false

- name: Display PowerShell logging and event log configuration
  debug:
    msg:
      - "‚úì PowerShell script block logging enabled"
      - "‚úì PowerShell module logging enabled" 
      - "‚úì Windows Event Log sizes increased:"
      - "  - Security: 1GB"
      - "  - System: 512MB"
      - "  - Application: 512MB"

- name: Enable additional Windows audit policies for enhanced visibility
  win_shell: |
    # Enable advanced audit policies for maximum visibility
    auditpol /set /category:"Account Logon" /success:enable /failure:enable
    auditpol /set /category:"Account Management" /success:enable /failure:enable
    auditpol /set /category:"Detailed Tracking" /success:enable /failure:enable
    auditpol /set /category:"Logon/Logoff" /success:enable /failure:enable
    auditpol /set /category:"Object Access" /success:enable /failure:enable
    auditpol /set /category:"Policy Change" /success:enable /failure:enable
    auditpol /set /category:"Privilege Use" /success:enable /failure:enable
    auditpol /set /category:"System" /success:enable /failure:enable
    
    # Enable specific subcategories for detailed tracking
    auditpol /set /subcategory:"Process Creation" /success:enable
    auditpol /set /subcategory:"Process Termination" /success:enable
    auditpol /set /subcategory:"File System" /success:enable /failure:enable
    auditpol /set /subcategory:"Registry" /success:enable /failure:enable
  register: audit_policy_config
  failed_when: false

- name: Enable Sysmon-style command line auditing
  win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit
    name: ProcessCreationIncludeCmdLine_Enabled
    data: 1
    type: dword
  register: cmdline_audit

- name: Configure Windows Defender for enhanced logging
  win_shell: |
    # Enable Windows Defender operational logs
    wevtutil sl "Microsoft-Windows-Windows Defender/Operational" /e:true /ms:1073741824
    wevtutil sl "Microsoft-Windows-Windows Defender/WHC" /e:true /ms:536870912
  register: defender_logging
  failed_when: false

- name: Wait for agent service to be ready
  win_service:
    name: "Elastic Agent"
    state: started
  register: agent_service_start
  retries: 5
  delay: 10

- name: Wait for agent to fully initialize
  pause:
    seconds: 30

- name: Verify EDR agent status and Fleet connectivity
  win_shell: |
    Write-Output "=== Elastic Agent Status ==="
    & "C:\Program Files\Elastic\Agent\elastic-agent.exe" status
    Write-Output ""
    Write-Output "=== Elastic Agent Version ==="
    & "C:\Program Files\Elastic\Agent\elastic-agent.exe" version
  register: agent_status_output
  failed_when: false

- name: Display comprehensive EDR Agent status
  debug:
    msg:
      - "‚úì EDR Agent installed and enrolled on {{ inventory_hostname }}"
      - "{{ agent_status_output.stdout_lines }}"

- name: Display Fleet enrollment success
  debug:
    msg:
      - "üõ°Ô∏è Elastic EDR Agent successfully enrolled with Fleet Server"
      - "Agent should appear in Kibana Fleet management within 1-2 minutes"
      - "Check: http://{{ elastic_server_host }}:5601 ‚Üí Fleet ‚Üí Agents"