- name: Install Logstash
  apt:
    name: "logstash={{ logstash_version }}"
    state: present

- name: Create logstash pipeline for Windows logs
  copy:
    content: |
      input {
        beats {
          port => {{ logstash_port }}
        }
      }
      
      filter {
        # Parse Windows Event Logs
        if [agent][type] == "elastic-agent" and [event][dataset] =~ /windows/ {
          # Add security event categorization
          if [winlog][event_id] == "4624" {
            mutate {
              add_field => { "security_event_type" => "logon_success" }
              add_field => { "security_severity" => "info" }
            }
          }
          
          if [winlog][event_id] == "4625" {
            mutate {
              add_field => { "security_event_type" => "logon_failure" }
              add_field => { "security_severity" => "warning" }
            }
          }
          
          if [winlog][event_id] == "4648" {
            mutate {
              add_field => { "security_event_type" => "explicit_logon" }
              add_field => { "security_severity" => "medium" }
            }
          }
          
          if [winlog][event_id] == "4769" {
            mutate {
              add_field => { "security_event_type" => "kerberos_ticket" }
              add_field => { "security_severity" => "info" }
            }
            # Flag potential Kerberoasting
            if [winlog][event_data][TicketEncryptionType] == "0x17" {
              mutate {
                add_field => { "potential_attack" => "kerberoasting" }
                replace => { "security_severity" => "high" }
              }
            }
          }
          
          if [winlog][event_id] == "4662" {
            mutate {
              add_field => { "security_event_type" => "object_access" }
              add_field => { "security_severity" => "info" }
            }
            # Flag potential DCSync
            if [winlog][event_data][Properties] =~ /1131f6aa-9c07-11d1-f79f-00c04fc2dcd2/ {
              mutate {
                add_field => { "potential_attack" => "dcsync" }
                replace => { "security_severity" => "critical" }
              }
            }
          }
          
          # Add timestamp parsing
          date {
            match => [ "[winlog][time_created]", "yyyy-MM-dd HH:mm:ss.SSS" ]
            target => "@timestamp"
          }
          
          # GeoIP for source IPs if available
          if [source][ip] {
            geoip {
              source => "[source][ip]"
              target => "source_geo"
            }
          }
        }
        
        # Process endpoint security events
        if [agent][type] == "elastic-agent" and [event][dataset] =~ /endpoint/ {
          mutate {
            add_field => { "log_type" => "endpoint_security" }
          }
          
          # Flag malware detections
          if [event][action] == "malware_detected" {
            mutate {
              add_field => { "security_alert" => "malware" }
              add_field => { "security_severity" => "critical" }
            }
          }
        }
      }
      
      output {
        elasticsearch {
          hosts => ["https://localhost:9200"]
          user => "elastic"
          password => "{{ elastic_password }}"
          ssl => true
          ssl_certificate_verification => false
          index => "%{[event][dataset]}-%{+YYYY.MM.dd}"
        }
        
        # Also output high severity events to a special index
        if [security_severity] == "critical" or [security_severity] == "high" {
          elasticsearch {
            hosts => ["https://localhost:9200"]
            user => "elastic"
            password => "{{ elastic_password }}"
            ssl => true
            ssl_certificate_verification => false
            index => "security-alerts-%{+YYYY.MM.dd}"
          }
        }
      }
    dest: /etc/logstash/conf.d/windows-security.conf
    owner: root
    group: logstash
    mode: '0644'
  notify: restart logstash

- name: Create logstash pipeline settings
  copy:
    content: |
      # Settings file in YAML
      #
      # Settings can be specified either in hierarchical form, e.g.:
      #   pipeline:
      #     batch:
      #       size: 125
      #       delay: 50
      #
      # Or as flat keys:
      #   pipeline.batch.size: 125
      #   pipeline.batch.delay: 50
      
      node.name: goad-logstash
      path.data: /var/lib/logstash
      pipeline.workers: 2
      pipeline.batch.size: 250
      pipeline.batch.delay: 50
      path.config: /etc/logstash/conf.d/*.conf
      path.logs: /var/log/logstash
      xpack.monitoring.enabled: true
      xpack.monitoring.elasticsearch.hosts: ["https://localhost:9200"]
      xpack.monitoring.elasticsearch.username: elastic
      xpack.monitoring.elasticsearch.password: elastic
      xpack.monitoring.elasticsearch.ssl.verification_mode: none
    dest: /etc/logstash/logstash.yml
    owner: root
    group: logstash
    mode: '0644'
  notify: restart logstash

- name: Start and enable Logstash
  systemd:
    name: logstash
    state: started
    enabled: yes