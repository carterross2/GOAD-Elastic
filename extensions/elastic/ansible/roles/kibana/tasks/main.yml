- name: Display Kibana installation progress
  debug:
    msg: "Starting Kibana installation for EDR management..."

- name: Install Kibana
  apt:
    name: "kibana={{ kibana_version }}"
    state: present
  notify: restart kibana

- name: Create kibana configuration
  template:
    src: kibana.yml.j2
    dest: /etc/kibana/kibana.yml
    owner: root
    group: kibana
    mode: '0660'
  notify: restart kibana

- name: Start and enable Kibana
  systemd:
    name: kibana
    state: started
    enabled: yes

- name: Display startup message
  debug:
    msg: "Kibana is starting... This requires Elasticsearch to be ready first and may take several minutes."

- name: Wait for Elasticsearch to be ready FIRST
  uri:
    url: "http://localhost:9200/_cluster/health"
    user: "elastic"
    password: "elastic"
    force_basic_auth: yes
  register: es_health
  until: es_health.json.status in ["yellow", "green"]
  retries: 20
  delay: 15

- name: Check Kibana service status before waiting
  shell: systemctl status kibana --no-pager
  register: kibana_service_status
  failed_when: false

- name: Display Kibana service status
  debug:
    msg: "{{ kibana_service_status.stdout_lines }}"

- name: Check Kibana logs for errors
  shell: tail -20 /var/log/kibana/kibana.log
  register: kibana_logs
  failed_when: false

- name: Display recent Kibana logs
  debug:
    msg: "{{ kibana_logs.stdout_lines }}"

- name: Wait for Kibana to start (with debugging)
  wait_for:
    port: "{{ kibana_port }}"
    host: "localhost"
    delay: 30
    timeout: 300
  register: kibana_wait_result
  failed_when: false

- name: Check if Kibana failed to start
  block:
    - name: Display Kibana startup failure details
      debug:
        msg: 
          - "Kibana failed to start within timeout"
          - "Check the logs above for configuration issues"
          - "Common issues: Elasticsearch not ready, configuration errors, memory issues"
    
    - name: Fail with helpful message
      fail:
        msg: "Kibana startup failed - check service status and logs above"
  when: kibana_wait_result.failed | default(false)

- name: Verify Kibana API is ready
  uri:
    url: "http://localhost:{{ kibana_port }}/api/status"
    method: GET
  register: kibana_status
  until: kibana_status.status == 200
  retries: 3
  delay: 15

- name: Display Kibana ready message
  debug:
    msg: "✓ Kibana is now ready for EDR management"

- name: Setup Fleet for EDR agents
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/setup"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
  register: fleet_setup
  until: fleet_setup.status == 200
  retries: 10
  delay: 30

- name: Install required Fleet packages for EDR
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/epm/packages/{{ item }}"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      force: true
  register: package_install_result
  failed_when: false
  retries: 3
  delay: 30
  loop:
    - "endpoint"
    - "windows" 
    - "system"

- name: Display package installation results
  debug:
    msg: 
      - "Package {{ item.item }} installation: {{ 'SUCCESS' if item.status == 200 else 'FAILED' }}"
      - "Status: {{ item.status | default('No response') }}"
  loop: "{{ package_install_result.results }}"

- name: Wait for packages to be fully installed
  pause:
    seconds: 30

- name: Create Fleet Server host
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/fleet_server_hosts"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      name: "default"
      host_urls: ["http://{{ ansible_host }}:8220"]
      is_default: true
  register: fleet_server_host
  failed_when: false

- name: Create Fleet Server policy
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/agent_policies"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      name: "Fleet Server Policy"
      namespace: "default"
      description: "Fleet Server policy for GOAD EDR lab"
      has_fleet_server: true
  register: fleet_server_policy
  failed_when: false

- name: Create Windows EDR agent policy
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/agent_policies"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      name: "Windows EDR Policy"
      namespace: "default"
      description: "EDR policy for Windows domain machines"
  register: windows_edr_policy
  failed_when: false

- name: Get existing Windows EDR policy ID (if policy creation failed)
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/agent_policies"
    method: GET
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
  register: existing_edr_policies
  when: windows_edr_policy.status is defined and windows_edr_policy.status == 409

- name: Find Windows EDR policy ID using loop
  set_fact:
    windows_edr_policy_id: "{{ item.id }}"
  loop: "{{ existing_edr_policies.json['items'] | default([]) }}"
  when:
    - windows_edr_policy.status is defined 
    - windows_edr_policy.status == 409
    - item.name == "Windows EDR Policy"

- name: Set Windows EDR policy ID from newly created policy
  set_fact:
    windows_edr_policy_id: "{{ windows_edr_policy.json.item.id }}"
  when: windows_edr_policy.status is defined and windows_edr_policy.status == 200

- name: Add Enhanced Endpoint Security integration to Windows EDR policy
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/package_policies"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      name: "endpoint-security-policy"
      policy_id: "{{ windows_edr_policy_id }}"
      package:
        name: "endpoint"
        version: "latest"
      inputs:
        - type: "endpoint"
          enabled: true
          streams: []
          config:
            policy:
              value:
                windows:
                  malware:
                    mode: "prevent"
                  ransomware:
                    mode: "prevent"
                  memory_protection:
                    mode: "prevent"
                  behavior_protection:
                    mode: "prevent"
                  popup:
                    malware:
                      enabled: true
                    ransomware:
                      enabled: true
                  antivirus_registration:
                    enabled: true
                  attack_surface_reduction:
                    credential_hardening:
                      enabled: true
                  events:
                    process: true
                    file: true
                    network: true
                    registry: true
                    dns: true
                    library: true
                  logging:
                    file: "info"
  register: endpoint_integration
  failed_when: false

- name: Add comprehensive Windows integration to EDR policy
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/package_policies"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      name: "windows-comprehensive-logs"
      policy_id: "{{ windows_edr_policy_id }}"
      package:
        name: "windows"
        version: "latest"
      inputs:
        - type: "winlogs"
          enabled: true
          streams:
            - enabled: true
              data_stream:
                dataset: "windows.security"
                type: "logs"
              vars:
                channel:
                  value: "Security"
                preserve_original_event:
                  value: true
            - enabled: true
              data_stream:
                dataset: "windows.application"
                type: "logs"
              vars:
                channel:
                  value: "Application"
            - enabled: true
              data_stream:
                dataset: "windows.system"
                type: "logs"
              vars:
                channel:
                  value: "System"
            - enabled: true
              data_stream:
                dataset: "windows.powershell"
                type: "logs"
              vars:
                channel:
                  value: "Windows PowerShell"
            - enabled: true
              data_stream:
                dataset: "windows.powershell_operational"
                type: "logs"
              vars:
                channel:
                  value: "Microsoft-Windows-PowerShell/Operational"
            - enabled: true
              data_stream:
                dataset: "windows.forwarded"
                type: "logs"
              vars:
                channel:
                  value: "ForwardedEvents"
        - type: "httpjson"
          enabled: false
        - type: "etw"
          enabled: true
          streams:
            - enabled: true
              data_stream:
                dataset: "windows.etw"
                type: "logs"
  register: windows_comprehensive_integration
  failed_when: false

- name: Add System integration for Windows Event Logs
  uri:
    url: "http://localhost:{{ kibana_port }}/api/fleet/package_policies"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      name: "system-logs-policy"
      policy_id: "{{ windows_edr_policy_id }}"
      package:
        name: "system"
        version: "latest"
      inputs:
        - type: "winlogs"
          enabled: true
          streams:
            - enabled: true
              data_stream:
                dataset: "system.security"
                type: "logs"
              vars:
                channel:
                  value: "Security"
                preserve_original_event:
                  value: true
            - enabled: true
              data_stream:
                dataset: "system.application"
                type: "logs"
              vars:
                channel:
                  value: "Application"
            - enabled: true
              data_stream:
                dataset: "system.system"
                type: "logs"
              vars:
                channel:
                  value: "System"
        - type: "system/metrics"
          enabled: true
          streams:
            - enabled: true
              data_stream:
                dataset: "system.cpu"
                type: "metrics"
            - enabled: true
              data_stream:
                dataset: "system.memory"
                type: "metrics"
            - enabled: true
              data_stream:
                dataset: "system.network"
                type: "metrics"
            - enabled: true
              data_stream:
                dataset: "system.filesystem"
                type: "metrics"
  register: system_integration
  failed_when: false

- name: Set Fleet Server policy ID
  set_fact:
    fleet_server_policy_id: "{{ fleet_server_policy.json.item.id if (fleet_server_policy.json.item is defined) else 'fleet-server-policy' }}"

- name: Install and enable all available Elastic detection rules
  uri:
    url: "http://localhost:{{ kibana_port }}/api/detection_engine/rules/_bulk_action"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body:
      action: "enable"
      query: "enabled:false"
  register: enable_rules_result
  failed_when: false
  retries: 3
  delay: 30

- name: Load Elastic prebuilt detection rules
  uri:
    url: "http://localhost:{{ kibana_port }}/api/detection_engine/rules/prepackaged"
    method: PUT
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
      Authorization: "Basic {{ ('elastic:' + elastic_password) | b64encode }}"
    body_format: json
    body: {}
  register: prebuilt_rules_result
  retries: 3
  delay: 60

- name: Generate Fleet Server service token
  uri:
    url: "http://localhost:9200/_security/service/elastic/fleet-server/credential/token/fleet-server-token"
    method: POST
    user: "elastic"
    password: "elastic"
    force_basic_auth: yes
  register: fleet_token_response

- name: Set Fleet Server policy ID
  set_fact:
    fleet_server_policy_id: "{{ fleet_server_policy.json.item.id if (fleet_server_policy.json.item is defined) else 'fleet-server-policy' }}"

- name: Install Fleet Server locally (with embedded token generation)
  shell: |
    cd /tmp
    curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-{{ kibana_version }}-linux-x86_64.tar.gz
    tar xzvf elastic-agent-{{ kibana_version }}-linux-x86_64.tar.gz
    cd elastic-agent-{{ kibana_version }}-linux-x86_64
    
    # Generate or get existing token
    TOKEN=$(curl -s -X POST -u elastic:elastic "http://localhost:9200/_security/service/elastic/fleet-server/credential/token/fleet-server-token-$(date +%s)" | jq -r '.token.value // empty')
    if [ -z "$TOKEN" ]; then
      TOKEN=$(curl -s -u elastic:elastic "http://localhost:9200/_security/service/elastic/fleet-server/credential/token" | jq -r '.tokens[0].token.value')
    fi
    
    sudo ./elastic-agent install --fleet-server-es=http://localhost:9200 --fleet-server-service-token=$TOKEN --fleet-server-policy={{ fleet_server_policy_id }} --force
  register: fleet_server_install

- name: Wait for Fleet Server to be ready
  pause:
    seconds: 30

- name: Verify Fleet Server is running
  systemd:
    name: elastic-agent
    state: started
  register: fleet_service_status

- name: Check Fleet Server status
  uri:
    url: "https://localhost:8220/api/status"
    method: GET
    validate_certs: no
  register: fleet_server_status
  until: fleet_server_status.status == 200
  retries: 3
  delay: 10

- name: Display Fleet Server status
  debug:
    msg:
      - "✓ Fleet Server is running and accessible"
      - "Fleet Server should now be visible in Kibana → Fleet → Agents"
      - "Check at: http://{{ ansible_default_ipv4.address }}:5601/app/fleet/agents"

- name: Wait for Fleet Server to be ready
  pause:
    seconds: 30
  when: fleet_server_install.rc == 0

- name: Store Windows EDR policy information for agent installation
  set_fact:
    windows_agent_policy: "{{ windows_edr_policy }}"

- name: Find host-only network IP
  set_fact:
    host_only_candidates: >-
      {{
        ansible_interfaces 
        | map('regex_replace', '^(.*)$', 'ansible_\1')
        | map('extract', hostvars[inventory_hostname])
        | selectattr('ipv4', 'defined')
        | selectattr('ipv4.address', 'defined')
        | selectattr('ipv4.address', 'match', '^192\.168\.56\.')
        | map(attribute='ipv4.address')
        | list
      }}

- name: Set VM network information
  set_fact:
    elastic_vm_ip: "{{ ansible_default_ipv4.address }}"
    elastic_host_only_ip: "{{ host_only_candidates[0] if host_only_candidates else ansible_default_ipv4.address }}"

- name: Display comprehensive EDR setup information
  debug:
    msg:
      - "==============================================="
      - "🛡️  ELASTIC EDR INSTALLATION COMPLETE! 🛡️"
      - "==============================================="
      - ""
      - "📊 ACCESS INFORMATION:"
      - "• Kibana EDR Console: http://{{ elastic_host_only_ip }}:{{ kibana_port }}"
      - "• Elasticsearch API: http://{{ elastic_host_only_ip }}:9200"
      - "• Fleet Server: http://{{ elastic_host_only_ip }}:8220"
      - "• From Host (Port Forward): http://localhost:{{ kibana_port }} (if configured)"
      - ""
      - "🔐 CREDENTIALS:"
      - "• Username: elastic"
      - "• Password: elastic"
      - ""
      - "🛡️ EDR FEATURES:"
      - "• Endpoint Protection: Malware & Ransomware Prevention"
      - "• Real-time Process Monitoring"
      - "• Memory Protection & Behavior Analysis"
      - "• Attack Surface Reduction"
      - "• Threat Hunting & Investigation"
      - ""
      - "🔍 EDR MANAGEMENT:"
      - "• Endpoint Management: Fleet → Agents"
      - "• Security Events: Security → Explore"
      - "• Detections: Security → Detections"
      - "• Cases: Security → Cases"
      - "• Host Details: Security → Explore → Hosts"
      - ""
      - "💡 QUICK START:"
      - "1. Open http://{{ elastic_host_only_ip }}:{{ kibana_port }}"
      - "2. Login with elastic/elastic"
      - "3. Go to Fleet → Agents to verify Windows EDR agents enrollment"
      - "4. Go to Security → Explore for endpoint investigation"
      - "5. Go to Security → Detections for threat detection rules"
      - "==============================================="
