- name: Display Kibana installation progress
  debug:
    msg: "Starting Kibana installation and configuration..."

- name: Install Kibana
  apt:
    name: "kibana={{ kibana_version }}"
    state: present
  notify: restart kibana

- name: Create kibana configuration
  template:
    src: kibana.yml.j2
    dest: /etc/kibana/kibana.yml
    owner: root
    group: kibana
    mode: '0660'
  notify: restart kibana

- name: Start and enable Kibana
  systemd:
    name: kibana
    state: started
    enabled: yes

- name: Wait for Kibana to start
  wait_for:
    port: "{{ kibana_port }}"
    host: "localhost"
    delay: 60

- name: Wait for Elasticsearch to be ready
  uri:
    url: "http://localhost:9200/_cluster/health"
    user: "elastic"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
  register: es_health
  until: es_health.json.status in ["yellow", "green"]
  retries: 20
  delay: 15

- name: Wait additional time for Kibana API to be ready
  wait_for:
    port: "{{ kibana_port }}"
    host: "localhost"
    delay: 60
    timeout: 300

- name: Verify Kibana is fully operational
  uri:
    url: "http://localhost:{{ kibana_port }}/api/status"
    method: GET
    user: "elastic"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
  register: kibana_status
  until: kibana_status.status == 200
  retries: 15
  delay: 20

- name: Check if Kibana API is responsive
  uri:
    url: "http://localhost:{{ kibana_port }}/api/status"
    method: GET
  register: kibana_status
  until: kibana_status.status == 200
  retries: 20
  delay: 15

- name: Import Windows Security Dashboards and Index Patterns
  uri:
    url: "http://localhost:{{ kibana_port }}/api/saved_objects/_import"
    method: POST
    user: "elastic"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    headers:
      kbn-xsrf: true
    body_format: form-multipart
    body:
      file:
        content: "{{ lookup('file', 'windows_dashboards.ndjson') }}"
        filename: "windows_dashboards.ndjson"
        mime_type: "application/x-ndjson"
  register: dashboard_import_result
  until: dashboard_import_result.status in [200, 409]
  retries: 3
  delay: 15

- name: Display dashboard import status
  debug:
    msg: 
      - "Dashboard import result: {{ dashboard_import_result.json.success | default('unknown') }}"
      - "Errors: {{ dashboard_import_result.json.errors | default('none') }}"
  when: dashboard_import_result.json is defined

- name: Create default index pattern if import failed
  uri:
    url: "http://localhost:{{ kibana_port }}/api/saved_objects/index-pattern/windows-security-default"
    method: POST
    user: "elastic"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
    body_format: json
    body:
      attributes:
        title: "windows-*,logs-windows.*"
        timeFieldName: "@timestamp"
  register: fallback_index_result
  failed_when: false
  when: dashboard_import_result.json.success is not defined or not dashboard_import_result.json.success

- name: Set default index pattern
  uri:
    url: "http://localhost:{{ kibana_port }}/api/kibana/settings/defaultIndex"
    method: POST
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
    body_format: json
    body:
      value: "windows-security-index-pattern"
  register: default_index_result
  failed_when: false

- name: Enable Elastic Security app
  uri:
    url: "http://localhost:{{ kibana_port }}/api/security_solution/sourcerer"
    method: POST
    user: "elastic"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/json"
      kbn-xsrf: true
    body_format: json
    body:
      patternList: ["windows-*", "logs-windows.*", "logs-endpoint.*", "security-alerts-*"]
  register: security_app_result
  failed_when: false

- name: Display comprehensive access information
  debug:
    msg:
      - "==============================================="
      - "üöÄ ELASTIC STACK INSTALLATION COMPLETE! üöÄ"
      - "==============================================="
      - ""
      - "üìä ACCESS INFORMATION:"
      - "‚Ä¢ Kibana Web UI: http://{{ ansible_default_ipv4.address }}:{{ kibana_port }}"
      - "‚Ä¢ Elasticsearch API: http://{{ ansible_default_ipv4.address }}:9200"
      - "‚Ä¢ From Host (Port Forward): http://localhost:{{ kibana_port }}"
      - ""
      - "üîê CREDENTIALS:"
      - "‚Ä¢ Username: elastic"
      - "‚Ä¢ Password: elastic"
      - ""
      - "üìà PRE-BUILT DASHBOARDS:"
      - "Navigate to Analytics ‚Üí Dashboard to access:"
      - "‚Ä¢ Windows Security Events Dashboard"
      - "‚Ä¢ Active Directory Authentication Dashboard" 
      - "‚Ä¢ Endpoint Security Overview Dashboard"
      - "‚Ä¢ Network Security Dashboard"
      - "‚Ä¢ Attack Timeline Dashboard"
      - ""
      - "üîç DATA EXPLORATION:"
      - "‚Ä¢ Raw Logs: Analytics ‚Üí Discover"
      - "‚Ä¢ Index Management: Management ‚Üí Stack Management ‚Üí Index Management"
      - "‚Ä¢ Detection Rules: Security ‚Üí Rules ({{ rules_install_result.json.created | default([]) | length }} rules installed)"
      - ""
      - "üìä SERVICE STATUS:"
      - "‚Ä¢ Elasticsearch: {{ final_es_health.json.status | default('Unknown') }}"
      - "‚Ä¢ Kibana: {{ 'Healthy' if kibana_status.status == 200 else 'Issue detected' }}"
      - "‚Ä¢ Detection Rules: {{ rules_install_result.json.rules_installed | default(0) }} installed, {{ rules_enable_result.json.updated | default(0) }} enabled"

      - ""
      - "üí° QUICK START:"
      - "1. Open http://{{ ansible_default_ipv4.address }}:{{ kibana_port }}"
      - "2. Login with elastic/elastic"
      - "3. Go to Analytics ‚Üí Dashboard for security insights"
      - "4. Check Security ‚Üí Alerts for active detections"
      - "==============================================="