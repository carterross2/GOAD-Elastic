- name: Update apt package index
  apt:
    update_cache: yes

- name: Install prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Update apt package index after adding Docker repo
  apt:
    update_cache: yes

- name: Install Docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: present

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Set vm.max_map_count for Elasticsearch (runtime)
  shell: sysctl -w vm.max_map_count=262144
  become: yes

- name: Set vm.max_map_count for Elasticsearch (persistent)
  lineinfile:
    path: /etc/sysctl.conf
    line: "vm.max_map_count=262144"
    create: yes
  become: yes

- name: Create Elastic stack directory
  file:
    path: /opt/elastic
    state: directory
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Stop any existing containers
  shell: docker compose -f /opt/elastic/docker-compose.yml down -v
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Remove any existing volumes and data
  shell: |
    docker volume prune -f
    rm -rf /opt/elastic/esdata
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Create Elasticsearch data directory with correct permissions
  file:
    path: /opt/elastic/esdata
    state: directory
    mode: "0777"
    owner: "1000"
    group: "1000"
  become: yes

- name: Template .env file
  template:
    src: ".env.j2"
    dest: "/opt/elastic/.env"
    mode: "0640"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Template docker-compose.yml
  template:
    src: "docker-compose.yml.j2"
    dest: "/opt/elastic/docker-compose.yml"
    mode: "0644"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Start Elastic containers
  shell: docker compose -f /opt/elastic/docker-compose.yml up -d
  args:
    executable: /bin/bash
  register: compose_result
  failed_when: compose_result.rc != 0

- name: Wait for Elasticsearch to be responsive
  uri:
    url: "http://localhost:9200/_cluster/health"
    method: GET
    user: elastic
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    status_code: [200, 201]
  register: es_health
  retries: 30
  delay: 10
  until: es_health.status in [200, 201]

- name: Wait for Kibana to be ready
  uri:
    url: "http://localhost:5601/api/status"
    method: GET
    user: elastic
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    status_code: [200, 201]
  register: kb_status
  retries: 60
  delay: 10
  until: kb_status.status in [200, 201] and (kb_status.json.status.overall.level is defined and kb_status.json.status.overall.level == 'available')

- name: Setup Fleet and create policy + token
  include_tasks: fleet_setup.yml