- name: Create temporary directory
  win_file:
    path: "{{ temp_download_path }}"
    state: directory

- name: Get enrollment token from Fleet Server (with retry)
  win_get_url:
    url: "http://{{ fleet_server_host }}/enrollment_token"
    dest: "{{ temp_download_path }}\\enrollment_token"
  register: enrollment_token_download
  retries: 10
  delay: 30

- name: Get Fleet Server URL (with retry)
  win_get_url:
    url: "http://{{ fleet_server_host }}/fleet_server_url"
    dest: "{{ temp_download_path }}\\fleet_server_url"
  register: fleet_url_download
  retries: 5
  delay: 15

- name: Verify enrollment token was retrieved
  win_stat:
    path: "{{ temp_download_path }}\\enrollment_token"
  register: token_file
  failed_when: not token_file.stat.exists

- name: Verify Fleet Server URL was retrieved
  win_stat:
    path: "{{ temp_download_path }}\\fleet_server_url"
  register: url_file
  failed_when: not url_file.stat.exists

- name: Read enrollment token
  win_shell: Get-Content "{{ temp_download_path }}\\enrollment_token"
  register: enrollment_token

- name: Read Fleet Server URL
  win_shell: Get-Content "{{ temp_download_path }}\\fleet_server_url"
  register: fleet_server_url

- name: Validate token and URL are not empty
  fail:
    msg: "Enrollment token or Fleet Server URL is empty"
  when: enrollment_token.stdout | trim == "" or fleet_server_url.stdout | trim == ""

- name: Download Elastic Agent for Windows
  win_get_url:
    url: "https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-{{ elasticsearch_version }}-windows-x86_64.zip"
    dest: "{{ temp_download_path }}\\elastic-agent.zip"
  register: agent_download
  retries: 3
  delay: 10

- name: Extract Elastic Agent
  win_unzip:
    src: "{{ temp_download_path }}\\elastic-agent.zip"
    dest: "{{ temp_download_path }}\\"
    delete_archive: no

- name: Check if Elastic Agent is already installed
  win_service:
    name: "Elastic Agent"
  register: existing_agent
  ignore_errors: yes

- name: Uninstall existing Elastic Agent if present
  win_shell: |
    cd "C:\Program Files\Elastic\Agent"
    .\elastic-agent.exe uninstall --force
  when: existing_agent.exists is defined and existing_agent.exists
  ignore_errors: yes

- name: Install Elastic Agent with Fleet enrollment
  win_shell: |
    cd "{{ temp_download_path }}\\elastic-agent-{{ elasticsearch_version }}-windows-x86_64"
    .\\elastic-agent.exe install --url="{{ fleet_server_url.stdout | trim }}" --enrollment-token="{{ enrollment_token.stdout | trim }}" --insecure --force --non-interactive
  register: agent_install_result
  failed_when: agent_install_result.rc != 0
  retries: "{{ max_install_retries }}"
  delay: 30

- name: Wait for Elastic Agent service to start
  win_service:
    name: "Elastic Agent"
    state: started
  register: agent_service_status
  retries: 15
  delay: 20
  until: agent_service_status.state == "running"

- name: Verify agent enrollment
  win_shell: |
    cd "C:\Program Files\Elastic\Agent"
    .\elastic-agent.exe status
  register: agent_status
  retries: 5
  delay: 10

- name: Display agent status
  debug:
    msg: "âœ… Elastic Agent Status: {{ agent_status.stdout }}"

- name: Clean up temporary files
  win_file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ temp_download_path }}\\elastic-agent.zip"
    - "{{ temp_download_path }}\\enrollment_token"
    - "{{ temp_download_path }}\\fleet_server_url"
  ignore_errors: yes
